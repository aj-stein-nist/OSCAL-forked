<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xpath-default-namespace="http://csrc.nist.gov/ns/oscal/specml"
    version="3.0">

    <xsl:output indent="yes"/>

    <xsl:template match="/">
        <xsl:text>&#xA;</xsl:text>
        <xsl:comment expand-text="true"> autogenerated { current-dateTime() } following model in example-set.xspec</xsl:comment>
        <xsl:processing-instruction name="xml-model">href="lib/xspec-test-dev.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"</xsl:processing-instruction>
        <xsl:processing-instruction name="xml-stylesheet">type="text/css" href="lib/xspec-oxygen.css"</xsl:processing-instruction>
        <xsl:processing-instruction name="specification" expand-text="true">{ replace(document-uri(/),'.*/','') }</xsl:processing-instruction>
        <x:description stylesheet="../../utils/util/resolver-pipeline/oscal-profile-RESOLVE.xsl"
            run-as="external">

            <!-- x:description/@run-as='external' permits the context item to be determined dynamically per scenario
                cf https://github.com/xspec/xspec/wiki/External-Transformation#global-context-item
                
                helper function for cleaning up whitespace:
                  see https://github.com/xspec/xspec/wiki/Integrating-Your-Own-Test-Helpers for
                  for an example see https://github.com/xspec/xspec/blob/master/tutorial/helper/ws-only-text/href_stylesheet.xspec
    -->

            <x:helper
                stylesheet="lib/oscal-profile-test-helper.xsl"/>
            <!-- looking at all the profile documents in the same directory as this XSLT -->

            
            <xsl:apply-templates select="//req" mode="make-file-scenario"/>

        </x:description>

    </xsl:template>

    <xsl:template match="req" mode="make-file-scenario" expand-text="true">
        <xsl:variable name="me" select="."/>
        <xsl:variable name="text-as-text">
            <xsl:apply-templates select="$me/node()"/>
        </xsl:variable>
        <xsl:iterate select="@eg/tokenize(.,'\s+')">
            <xsl:call-template name="make-file-scenario">
                <xsl:with-param name="req-id" select="$me/@id"/>
                <xsl:with-param name="filename" select="."/>
                <xsl:with-param name="text-as-text" select="$text-as-text"/>
            </xsl:call-template>
        </xsl:iterate>
        
        <!-- Use if not wanting tests produced by PIs, but instead one per req -->
        <!--<xsl:call-template name="make-file-scenario">
            <xsl:with-param name="req-id" select="$me/@id"/>
            <xsl:with-param name="filename" select="$me/@id || '_01'"/>
            <xsl:with-param name="text-as-text" select="$text-as-text"/>
        </xsl:call-template>-->
        
    </xsl:template>
    
    <xsl:template name="make-file-scenario" expand-text="true">
        <xsl:param name="filename" as="xs:string" required="true"/>
        <xsl:param name="req-id" as="attribute()?"/>
        <xsl:param name="text-as-text" as="item()*"/>
        <xsl:variable name="filepath" as="xs:string">requirement-tests/{$filename}</xsl:variable>
        <x:scenario label="Testing { $filename }: { normalize-space($text-as-text) }" pending="deployment">
            <xsl:text>&#xA;      </xsl:text>
            <xsl:processing-instruction name="requirement">{ $req-id} </xsl:processing-instruction>
            <x:context href="requirement-tests/{ $filename }"/>
            
            <x:expect label="Resolution of { $filename }" select="opr:scrub(.)"
                href="requirement-tests/output-expected/{ replace($filename,'\.xml$','_RESOLVED') }.xml"/>
        </x:scenario>
    </xsl:template>

    <xsl:template match="xref" expand-text="true">
        <xsl:text>[Section {@rid}]</xsl:text>
    </xsl:template>
</xsl:stylesheet>
